 

#include "stdio.h"
#include "stdlib.h"

//定义栈
struct sqstack
{
 char a[100];
 int top,bottom;
};

//栈的初始化
void initstack(struct sqstack *s)
{
 s->top=0;
s->bottom=0;
}


//进栈
void push(struct sqstack *s,char c)
{
 s->a[s->top]=c;
 s->top++;
}

//出栈
char pop(struct sqstack *s)
{
 char i;
 i=s->a[s->top-1];
 s->top--;
 return i;
}


//取顶
char gettop(struct sqstack s)
{
 char i;
 i=s.a[s.top-1];
 return i;
}

//判断是否为数字 1为数字
char number(char c)
{
 if(c-'0'>=0&&c-'0'<=9)
 return 1;
 else
  return 0;
}

 


//判断算符优先级
char precede(char a ,char b)
{
 int i,j,k;
 if(a=='w')
  i=0;
 if(a=='(')
  i=1;
 if(a==')')
  i=6;
 if(a=='+'||a=='-')
  i=3;
 if(a=='*'||a=='/')
  i=5;
 if(b==')')
  j=1;
 if(b=='w')
  j=0;
 if(b=='+'||b=='-')
  j=2;
 if(b=='*'||b=='/')
  j=4;
 if(b=='(')
  j=6;
    k=i-j;
 if(k>0)
  return '>' ;
 if(k<0)
  return '<' ;
 if(k==0)
  return '=';


}


//计算
char operate(char d,char b,char c)
{
 char k;
 
 if(b=='+')
  k=(d-'0')+(c-'0')+'0';
 if(b=='-')
  k=(d-'0')-(c-'0')+'0';
 if(b=='*')
  k=(d-'0')*(c-'0')+'0';
 if(b=='/')
  k=(d-'0')/(c-'0')+'0';
 return k;
}


 
 
//退出

main()
{
 //定义
struct sqstack optr;
struct sqstack opnd;
 char c,x,h,i,d,b,theta,j;
 
 initstack(&optr);
 push(&optr,'w');
 initstack(&opnd);
 c=getchar();

 while(c!='w'||gettop(optr)!='w')
 {
  x=number(c);
  if(x==1)
  {
   push(&opnd,c);
   c=getchar();
  }
  else
  {
   i=precede(gettop(optr),c);
   switch(i)
   {
case '<': push(&optr,c);
 c=getchar();
 break;
case '=': h=pop(&optr);
  c=getchar();
 break;
case '>': 
 theta=pop(&optr);
 b=pop(&opnd);
 d=pop(&opnd);
 push(&opnd,operate(d,theta,b));
 

   }
  }
 }
 printf("%c\n",gettop(opnd));
 
 
  

}
  

 

